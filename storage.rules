rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isImage() {
      return request.resource.contentType.matches('image/.*');
    }

    function isUnderSizeLimit() {
      return request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }

    // User profile pictures
    match /users/{userId}/profile.jpg {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
        isImage() && 
        isUnderSizeLimit();
      allow delete: if isOwner(userId);
    }

    // User photos
    match /users/{userId}/photos/{photoId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
        isImage() && 
        isUnderSizeLimit();
      allow delete: if isOwner(userId);
    }

    // Chat attachments
    match /chats/{chatId}/attachments/{fileName} {
      allow read: if isAuthenticated() && 
        (resource.metadata.senderId == request.auth.uid || 
         resource.metadata.receiverId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
        isUnderSizeLimit() && 
        isImage() &&
        request.resource.metadata.senderId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
        resource.metadata.senderId == request.auth.uid;
    }

    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 